14th Class (Dt: 10 June 2019)
-----------------------------
Today topic is Docker container

What is Docker?
Docker is computer software used for virtualization in order to have multiple Operating systems running on the same host. 
Unlike Hypervisors which are used for creating VM (Virtual machines), virtualization in Docker is performed on system-level in so called Docker containers.

Docker Tutorial for Beginners: https://www.guru99.com/docker-tutorial.html


Docker containers run in an isolated environment on top of the host's OS. Even if your host runs Windows OS, you can have Linux images running in containers with the help of Hyper-V, which automatically creates small VM to virtualize the system's base image.

Docker Architecture:
====================
Docker Engine:
--------------
Docker daemon called "dockerd" is the Docker engine which represents the server. Docker is the client-server type of application which means we have clients who relay to the server. The docker daemon and the clients can be run on the same or remote host, and they communicate through command line client binary.

Docker Images:
--------------
Docker images are the "source code" for the containers; we use them to build containers.
They can have software pre-installed which speeds up deployment. They are portable, and we can use existing images or build our own.


Registries:
------------
Docker stores the images in registries, publicly known as Docker hub. There are public and private registries. 
Docker company has public registry called Docker hub, where you can also store your images privately. 
Docker hub has millions of images, which you can start using now.

Docker Containers:
------------------
Containers are the organizational units of Docker. 
When we build an image and start running it; we are running in a container.
In simple terms, an image is a template, and a container is a copy of that template. You can have multiple containers (copies) of the same image.

=====================
Docker is available in two edition.
-> Community Edition, it's free.
-> Enterprise Edition, it's paid. You need a subscription to use it.

Follow the steps with subscription:
-----------------------------------
2nd AMI machine in AWS which contains docker in it.


Install the docker machine if it's not available.
[root@ip-172-31-3-66 ~]# yum install docker -y



[root@ip-172-31-3-66 ~]# docker --version
Docker version 18.06.1-ce, build e68fc7a215d7133c34aa18e3b72b4a21fd0c6136



--> ducker hub (https://hub.docker.com/)
It's a repository, many developer develop the images and publish in the docker hub.


docker images list the docker images under the base server(AWS AMI2)
[root@ip-172-31-3-66 ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE

To list the running container: 

To list all the container(running and stopped one) 
[root@ip-172-31-3-66 ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES



$ docker pull image_name
This command is going to download the image file into ur local base system.

[root@ip-172-31-3-66 ~]# docker pull httpd
Using default tag: latest
latest: Pulling from library/httpd
743f2d6c1f65: Pull complete
a8f7283e297c: Pull complete
a72363db8c78: Pull complete
Digest: sha256:6eceaadeab70e6355edb3fef41b8c0b34cafd9b00a17252c875530dcc2d98522
Status: Downloaded newer image for httpd:latest
[root@ip-172-31-3-66 ~]#



[root@ip-172-31-3-66 ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
httpd               latest              3bd2a941224f        4 days ago          140MB


This below cmd will create a container. It will first search in the local repo and if it's not there then search in dockerHub and pull it into the machine. It's internally pull and then run.

$ docker run image_name

[root@ip-172-31-3-66 ~]# docker run httpd
AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message
AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message
[Thu Jun 13 09:59:22.446579 2019] [mpm_event:notice] [pid 1:tid 140624013541440] AH00489: Apache/2.4.39 (Unix) configured -- resuming normal operations
[Thu Jun 13 09:59:22.446852 2019] [core:notice] [pid 1:tid 140624013541440] AH00094: Command line: 'httpd -D FOREGROUND'
[Thu Jun 13 09:59:24.499390 2019] [mpm_event:notice] [pid 1:tid 140624013541440] AH00491: caught SIGTERM, shutting down

------------------------------------------

# The above cmd will run in interactive mode, which is internally "docker run -i -t httpd"
But we need the shell prompt also, for that we have to mention -d, which means run in detach mode.

$ docker run -d image_file

[root@ip-172-31-3-66 ~]# docker run -d httpd
2d893d050c4eaacc1d81400f703440324ee0237f539ce6915b3e212596309dbc


[root@ip-172-31-3-66 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS               NAMES
2d893d050c4e        httpd               "httpd-foreground"   34 seconds ago      Up 33 seconds       80/tcp     compassionate_brahmagupta


The container id is "2d893d050c4e" which is first 12 char from "2d893d050c4eaacc1d81400f703440324ee0237f539ce6915b3e212596309dbc"


[root@ip-172-31-3-66 ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS                     PORTS               NAMES
2d893d050c4e        httpd               "httpd-foreground"   4 minutes ago       Up 4 minutes               80/tcp              compassionate_brahmagupta
a3088102851a        httpd               "httpd-foreground"   9 minutes ago       Exited (0) 7 minutes ago                       angry_khorana


Q. What is the diff bet ps and ps -a
ps -a will show all the container which has stopped as well running one.
ps will show the running container only.


# To stop a container.
[root@ip-172-31-3-66 ~]# docker container stop -t 10 f6be2057433d
f6be2057433d
[root@ip-172-31-3-66 ~]# docker container stop -t 10 79229001f974
79229001f974


# To remove a container.
[root@ip-172-31-3-66 ~]# docker rm -f 2d893d050c4e a3088102851a
2d893d050c4e
a3088102851a


# To remove all the containers in one command.
[root@ip-172-31-3-66 ~]# docker rm -f $(docker ps -aq)
f6be2057433d
79229001f974


# How to assign a name to a container 
[root@ip-172-31-3-66 ~]# docker run --name myFirstCont -d httpd


Note: Always the last word in the command is docker image file name.


[root@ip-172-31-3-66 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS               NAMES
fc82794c6cd2        httpd               "httpd-foreground"   5 seconds ago       Up 5 seconds        80/tcp              myFirstCont


# To execute a container (loging into) which is started.
[root@ip-172-31-3-66 ~]# docker exec -it myFirstCont /bin/bash

root@fc82794c6cd2:/usr/local/apache2#

#Here the container OS is Ubuntu.