16th Class (Dt: 12 June 2019)
-----------------------------
Today topic is Docker links and compose.

What is Docker links and it's usefulness?

With docker link we can link the containers.

Let assume out Software Product is using many applications and all the applications are running in different container. So the product will be
fully functional when all the containers are preoperly linked.


For Ex, first conrainer having an app called Wordpress and another container having db called MySQL.

Wordpress ->links to -> MySQL DB

Wordpress is a PHP based app. It runs on top of web server. It is a content management app used to write office apps.


IF Cont A depends on Cont B 

1. First Create cont B for linking with cont A
2. Create container A now


Search 'MySQL' in the docker hub.
You will get the MySQL Official Image
https://hub.docker.com/_/mysql

Click on the link for Dockerfile.
https://github.com/docker-library/mysql/blob/3362baccb4352bcf0022014f67c1ec7e6808b8c5/8.0/Dockerfile

EXPOSE 3306 33060
CMD ["mysqld"]

Here 3306 is the base port and 33060 is the port of Container OS.



From the webpage:-

How to use this image
----------------------
Start a mysql server instance

$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag

... where some-mysql is the name you want to assign to your container, my-secret-pw is the password to be set for the MySQL root user and tag is the tag specifying the MySQL version you want. See the list above for relevant tags.

If I will not put any tag name, it will take the latest one by default.


[root@ip-172-31-3-66 ~]# docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:8.0.16
Unable to find image 'mysql:8.0.16' locally
8.0.16: Pulling from library/mysql
312b0999e433: Pull complete
f864cfdc0264: Pull complete
Digest: sha256:415ac63da0ae6725d5aefc9669a1c02f39a00c574fdbc478dfd08db1e97c8f1b
Status: Downloaded newer image for mysql:8.0.16
f834dfcab01aab69a7f6c6d449ce769b957a0ed814db4fac2162d50af5b2daa9
[root@ip-172-31-3-66 ~]#


[root@ip-172-31-3-66 opt]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES
062294a98f63        mysql:8.0.16        "docker-entrypoint.s…"   10 seconds ago      Up 9 seconds        3306/tcp, 33060/tcp   some-mysql


[root@ip-172-31-3-66 opt]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
tomcat              latest              1488aaf58c73        6 days ago          522MB
httpd               latest              e77c77f17b46        7 days ago          140MB
mysql               8.0.16              c7109f74d339        8 days ago          443MB



Q. Why there's no port forwarding concept for database?
A. Because User don't contact to db directly, it would connect through the application.

-> Now go to docker hub, search for the Wordpress

Wordpress is using httpd in the backend.

Click on the first link
5.2.1-php7.1-apache, 5.2-php7.1-apache, 5-php7.1-apache, php7.1-apache, 5.2.1-php7.1, 5.2-php7.1, 5-php7.1, php7.1 (php7.1/apache/Dockerfile)

It will redirect to github and read that page.
https://github.com/docker-library/wordpress/blob/a0c880d2a238c0703025aa136516bb06279c6c02/php7.1/apache/Dockerfile



--> EXPOSE: It signifies Port no of the application. 
-----------

httpd
EXPOSE 80

tomcat 
EXPOSE 8080


-->link: Study about docker link.
--------

[root@ip-172-31-3-66 ~]# docker run -d -p 81:80 --link some-mysql wordpress
Unable to find image 'wordpress:latest' locally
latest: Pulling from library/wordpress
fc7181108d40: Already exists
6906631fde7a: Pull complete
92e20a11aeae: Pull complete
Digest: sha256:ee7641a7a5505a778eb8b4e6f77dcff7c50e2766d9999c59cedd9beadc030ada
Status: Downloaded newer image for wordpress:latest
2f75801633678589f14cca92c2920d278cf69cdcc2932c49400f4feb618a7495
[root@ip-172-31-3-66 ~]#



Go to browser and access port 81. 
http://13.127.91.50:81/

English -> Continue
===============================Welcome page=========================
Welcome to WordPress. Before getting started, we need some information on the database. You will need to know the following items before proceeding.

Database name
Database username
Database password
Database host

Table prefix (if you want to run more than one WordPress in a single database)
We’re going to use this information to create a wp-config.php file.	If for any reason this automatic file creation doesn’t work, don’t worry. All this does is fill in the database information to a configuration file. You may also simply open wp-config-sample.php in a text editor, fill in your information, and save it as wp-config.php.	Need more help? We got it.

In all likelihood, these items were supplied to you by your Web Host. If you don’t have this information, then you will need to contact them before you can continue. If you’re all ready…

Let's go
========================================================
Database Name:	wordpress
The name of the database you want to use with WordPress.

Username:	username
Your database username.

Password:	password
Your database password.

Database Host:	localhost
You should be able to get this info from your web host, if localhost doesn’t work.

Table Prefix:	wp_
If you want to run multiple WordPress installations in a single database, change this.


==> We will not setup here, however will setup this with docker-compose.


Docker-compose
==============

Q. What is docker compose
It's a configuration setup for the group of relevant containers, keep it inside a yaml file.


Q. What is YAML
It's a configuration file


Let assume we have 4 containers running in a server and server got down or hunged. 
Then all the container will come up with one yaml file.
In our yaml file we will going to write all the configuration setup.



go to docker hub.
https://hub.docker.com/_/wordpress

scroll to this line-->... via docker stack deploy or docker-compose

Example stack.yml for wordpress:
================================
version: '3.1'

services:

  wordpress:
    image: wordpress
    restart: always
    ports:
      - 8080:80
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_RANDOM_ROOT_PASSWORD: '1'



Explanation of this file:
==========================
wordpress, db are the service names  

restart: always
It will restart when you run the file

    ports:
      - 8080:80
8080 is the base OS port no, 80 is the container OS port.

when it see db in the env name WORDPRESS_DB_HOST under wordpress services, it will jump to db and install it first.


docker-compose.yaml or yml


[root@ip-172-31-3-66 ~]# mkdir wordpress
[root@ip-172-31-3-66 ~]# cd wordpress/
[root@ip-172-31-3-66 wordpress]# vi docker-compose.yaml
version: '3.1'

services:

  wordpress:
    image: wordpress
    restart: always
    ports:
      - 8080:80
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_RANDOM_ROOT_PASSWORD: '1'





[root@ip-172-31-3-66 wordpress]# docker-compose up
-bash: docker-compose: command not found

First time docker-compose will not available in your system, for installations go always to official document
--> Don't search in blogs, tutorial, forums.


Search for docker compose installation in Linux
https://docs.docker.com/compose/install/

Run these below commands to setup the docker-compose

step1. Run this command to download the current stable release of Docker Compose:

$ sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose



step2. Apply executable permissions to the binary:

$ sudo chmod +x /usr/local/bin/docker-compose

Note: If the command docker-compose fails after installation, check your path. You can also create a symbolic link to /usr/bin or any other directory in your path.



step3. 

$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose



step4. Test the installation.

$ docker-compose --version
docker-compose version 1.24.0, build 1110ad01





[root@ip-172-31-3-66 wordpress]# docker-compose up
## It is in interactive mode, Press Ctrl+C
# Run the below command which will run the docker-compose cmd in the background and run it where docker-compose.yaml file exist

Syntax:
$ docker-compose up -d -f 'location of the yaml file'


# Here we have our yaml file in wordpress folder.
[root@ip-172-31-3-66 wordpress]# ls -lrt
-rw-r--r-- 1 root root 465 Jun 12 05:02 docker-compose.yaml

[root@ip-172-31-3-66 wordpress]# docker-compose up -d
Starting wordpress_db_1        ... done
Starting wordpress_wordpress_1 ... done





Home exercise
---------------
How to configure bamboo
how to do CI/CD in bamboo



Docker links
https://hub.docker.com/_/mysql


https://hub.docker.com/_/wordpress?tab=description


https://github.com/docker-library/httpd/blob/476e8005868e3f72730d34334fd8cc2262819220/2.4/Dockerfile

https://github.com/docker-library/tomcat/blob/7eae995786f14b4e96010bcc11338724706e30eb/7/jdk8/Dockerfile

http://13.127.91.50:81/wp-admin/setup-config.php?step=1

docker compose install in linux
https://docs.docker.com/compose/install/


http://13.127.91.50:8080/wp-admin/install.php?step=1