10th Class (Dt: 30 May 2019)
----------------------------
Master and Slave in Jenkins world.

Create a RHEL machine and named it as Slave1.

Create the new credential using the same pem file for Slave1 machine.
Hints: Jenkins -> Credentials  -> global  -> Add Credentials

If you are using different key file(.pem file) for slave than Master then setup the new key credential first.

Jenkins --> Manage Jenkins --> Manage Nodes
Click on New node --> Provide Node name (Slave1) --> Select Permanent Agent option	-> ok 

Name: Slave1
Description: This is new slave nodes
Remote root dir: /home/ec2-user/
Lavels: label1

Usage: Use this node as much as possible

Launch method: Launch agent agents via ssh

Host: Private IP of slave 

Credentials: ec2-user(RemoteMachine1)

Host Key Verification Strategy: Non verifying Verification Strategy 


Availability: Keep this agent online as much as possible


If the Slave1 is marked with cross symbol, just refresh it. It will show with details. Still if it’s not coming up, then again configure it and read the logs.
In my case, it says java isn’t installed, so I installed jdk and set the ‘JAVA_HOME’ path variable in .bash_profile file and reconfigure it. Now check it might be come up.
 
Now, create a job for slave machine.
Jenkins--> New Item-->
Enter an item name "Slavejob1"
Freestyle Project --> click on ok

Save and Build Now. 
So far we have ran job on slave machine.




========= Parameterized Tasks ==========
Tasks1:
Step1: Create a new job "demo_job5"

In General section, check the option "This project is parameterized"
Select "Add Parameter" option as "String Parameter"
Provide name and description

Example:
Name pkg_name
Description "please provide the package you install"
Select "Trim the string"


Now, go to “Build” tab and select "Execute Shell"
Provide this command: "sudo yum install $pkg_name –y”
Save and build.

Click on “Build with Parameters”

	The job will be success.


Tasks2:
Step1: Create a new job "demo_job6"
In General section, select option "This project is parameterized"
Select "Add Parameter" option as "Choice Parameter"
Save and Build.

Provide details as below

Click on “Build with Parameters”


	the job should run successfully

Few other options under “General” tab.

General -> Disable this project
General -> Execute concurrent builds if necessary
General -> Restrict where this project can be run





Home Assignment:
Q. How to restore jenkins? 
1.	Take backup of jenkins folder
 
	# cp /var/lib/jenkins /tmp/jenkins_ddmmyy

2.	Stop jenkins 

	# service jenkins stop

3.	Uninstall jenkins 

	# yum remove jenkins –y 

4.	Delete jenkins directory  

	# rm –rf /var/lib/jenkins

5.	Install jenkins tool in Remote host

	Commands are available in this note at the starting point. 

6.	Copy the backup jenkin folder from host to remote host 

	# scp /tmp/jenkins_ddmmyy  ec2_user@RemoteHost_publicIP

7.	Open the jenkins page in web browser.

	publicIP:8080



Git Webhook
============

Github webhooking:
Create an account in github (https://github.com/), if you don’t have account there. 
Else, login to github with your credentials.

Step1: Create a new repo “demo_repo1” in github.
 
Click on New -> 

Click on the “Settings” (top right of it)

Step2:
Click on Webhooks(left side panel)  -> Add webhook -> 
Payload URL* “Provide jenkins server url”/github-webhook/ 
Content type: Select “application/json”  
Which events would you like to trigger this webhook?
Select “Send me everything” option

Note: In Payload URL don’t forget to add “github-webhook/” after the Jenkins URL.
Ex: http://52.66.237.2:8080/github-webhook/

Step3:
Provide github details URL and credentials in Jenkin.
Credentials -> Add Credentials -> 



Step4: Create a new job to use with github-webhook
Jenkins -> New Item -> (name as: Webhook_demo)


Save the configuration.
Now, add a new file in the demo_repo1. You can do either from website or from command prompt.

User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject
$ git clone https://github.com/satyakaibm/demo_repo1.git
Cloning into 'demo_repo1'...
warning: You appear to have cloned an empty repository.


User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)
$ git branch
* master


User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject
$ cd demo_repo1/

User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)
$ ls -lart
total 12
drwxr-xr-x 1 User 197610 0 Jun 10 00:43 ../
drwxr-xr-x 1 User 197610 0 Jun 10 00:47 ./
drwxr-xr-x 1 User 197610 0 Jun 10 00:47 .git/


User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)
$ echo "Hello Satya, what can I help for you?" > newFile1.txt

User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)
$ git add newFile1.txt
warning: LF will be replaced by CRLF in newFile1.txt.
The file will have its original line endings in your working directory


User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)
$ git commit -m "Added 1st line" newFile1.txt
warning: LF will be replaced by CRLF in newFile1.txt.
The file will have its original line endings in your working directory
[master (root-commit) 53ae2fb] Added 1st line
 1 file changed, 1 insertion(+)
 create mode 100644 newFile1.txt

User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)
$ git status
On branch master
Your branch is based on 'origin/master', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

nothing to commit, working tree clean


User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)
$ git push
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 263 bytes | 52.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/satyakaibm/demo_repo1.git
 * [new branch]      master -> master




Now go to Jenkins and wait for a moment. 
Please don’t click the “Build Now”. The job will be automatically build.

Step5:
Again do some changes in the text file and commit it again.
Once you push the file, build will trigger automatically on jenkins. Immediately go to jenkin page and watch.

Home exercise
-------------
https://www.baeldung.com/category/devops/tag/jenkins/


Build a maven package through in Jenkins


Learn how to install tomcat manually
--> tomcat installation in Linux
Help from web(techmint page)

Issue: 
Tomcat is working on port 8080 and 
Jenkins is also working on port 8080


--> Search how to change port number for tomcat

--> sample war file for tomcat download

--> Jboss installation

-->Then put those steps in jenkin and automate the task.


Build Periodically
Like cronjobs.
*	 * 	   * 		* 		*

This field follows the syntax of cron (with minor differences). Specifically, each line consists of 5 fields separated by TAB or whitespace:
MINUTE HOUR DOM MONTH DOW
MINUTE	Minutes within the hour (0–59)
HOUR	The hour of the day (0–23)
DOM	The day of the month (1–31)
MONTH	The month (1–12)
DOW	The day of the week (0–7) where 0 and 7 are Sunday.


echo “hello world”

Poll SCM

Configure Jenkins to poll changes in SCM.

Note that this is going to be an expensive operation for CVS, as every polling requires Jenkins to scan the entire workspace and verify it with the server. Consider setting up a "push" trigger to avoid this overhead, as described in this document.

every min Jenkin will check in SCM, if there is any changes in SCM it will trigger.


Interview Question:
Difference between Poll SCM and github web hook?

