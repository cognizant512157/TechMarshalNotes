12th Class (Dt: 04 June 2019)
---------------------------
Today topic is Git Repository

What is Git repository?

Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows.

Git is a Distributed Version Control tool that is used to store different versions of a file in a remote or local repository. It is used to track changes in the source code.

Example of repository are GIT, GitHub, BitBucket, SVN, CVS, Perforce.

Microsoft's recent acquisition of GitHub for $7.5 billion, there has been an incredible amount of interest in the distributed version control program known as Git.

Different names of repository.
1. Repository:
2. SCM (Source code management)
3. Tracking system
4. Version Control System (VCS)
   -> We can mantain version for each release. So some people also called it as VCS.


Getting a Git Repository
You typically obtain a Git repository in one of two ways:

1. You can take a local directory that is currently not under version control, and turn it into a Git repository
or
2. You can clone an existing Git repository from elsewhere.

In either case, you end up with a Git repository on your local machine, ready for work.

https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository

https://www.theserverside.com/video/Git-vs-GitHub-What-is-the-difference-between-them


Initializing a Repository in an Existing Directory:
If you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project’s directory. If you’ve never done this, it looks a little different depending on which system you’re running:

In Linux:
$ cd ~/my_project

In macOS:
$ cd /Users/user/my_project

In Windows:
$ cd C:\Users\User\Documents\GitProject




We will practice it in "Git Bash Here" console in Windows system.

$ cd  ~/Documents/GitProject

$ mkdir demo_repo1

$ cd  demo_repo1

$ git init demo_repo1
Initialized empty Git repository in C:/Users/User/Documents/GitProject/demo_repo1/.git/

Note: Here notice demo_repo1 is master now, because this folder has .git 
User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)$

$ mkdir ../demo_repo2
$ cd  ../demo_repo2

User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo2 $ 
$ cd  ../demo_repo1

User@DESKTOP-QJV3QK7 MINGW64 ~/Documents/GitProject/demo_repo1 (master)
$ ls -lart
total 4
drwxr-xr-x 1 User 197610 0 Jun  4 10:04 ./
drwxr-xr-x 1 User 197610 0 Jun  4 10:07 ../
drwxr-xr-x 1 User 197610 0 Jun  4 10:04 .git/


$ vi newFile1.txt
First 100 lines of code

$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        newFile1.txt

nothing added to commit but untracked files present (use "git add" to track)


$ git add newFile1.txt


$ git commit -m "Commiting my first 100 lines of code" newFile1.txt

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'User@DESKTOP-QJV3QK7.(none)')



$ git config --global user.email "satyabratakaran09@gmail.com"

$ git config --global user.name "Satyabrata Karan"


$ git commit -m "Commiting my 100 lines of code" newFile1.txt
[master (root-commit) 7203460] Commiting my 100 lines of code
 1 file changed, 2 insertions(+)
 create mode 100644 newFile1.txt


$ git status
On branch master
nothing to commit, working tree clean


$ vi newFile1.txt
First 100 lines of code
Second 100 lines of code


$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   newFile1.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git diff
diff --git a/newFile1.txt b/newFile1.txt
index f570290..72a23f5 100644
--- a/newFile1.txt
+++ b/newFile1.txt
@@ -2,6 +2,3 @@ First 100 lines of the code.
 Second 200 lines of the code.
-hi
-hello
-bye


$ git add .
warning: LF will be replaced by CRLF in newFile1.txt.
The file will have its original line endings in your working directory


$ git commit -m "Commiting my another 200 lines of code now."
[master 741809f] Commiting my another 200 lines of code now.
 1 file changed, 1 insertion(+), 1 deletion(-)


$ git status
On branch master
nothing to commit, working tree clean


$ git log
commit 741809fddf1a25d44151f52397a9db79dfea926a (HEAD -> master)
Author: Satyabrata Karan <satyabratakaran09@gmail.com>
Date:   Tue Jun 4 10:33:12 2019 +0530

    Commiting my another 200 lines of code now.

commit 7203460fcbfd20db7fea6aa4af17c67db8b1468d
Author: Satyabrata Karan <satyabratakaran09@gmail.com>
Date:   Tue Jun 4 10:27:54 2019 +0530

    Commiting my 100 lines of code



$ git log --oneline
741809f (HEAD -> master) Commiting my another 200 lines of code now.
7203460 Commiting my 100 lines of code






GitHub (https://github.com)
===========================
Login to GitHub account. 
It's free, you can sign up here without any cost.

Create a new repository in GitHub

New ->

Repository name: demo_repo1

Description: For practice

Public  

Click on Create Repository



You will see on the next screen.
---------------------------------
…or create a new repository on the command line
	echo "# demo_repo1" >> README.md
	git init
	git add README.md
	git commit -m "first commit"
	git remote add origin https://github.com/satyakaibm/demo_repo1.git
	git push -u origin master


…or push an existing repository from the command line
	git remote add origin https://github.com/satyakaibm/demo_repo1.git
	git push -u origin master


Now come to Git Bash terminal. and type it

$ git remote add origin https://github.com/satyakaibm/demo_repo1.git


$ git push -u origin master
Logon failed, use ctrl+c to cancel basic credential prompt.
Username for 'https://github.com': satyakaibm
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (6/6), 548 bytes | 182.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0)
To https://github.com/satyakaibm/demo_repo1.git
 * [new branch]      master -> master



Again do some change in file and commit with push the code to repo.

$ vi newFile1.txt
First 100 lines of code
Second 100 lines of code
Third 100 lines of code

$ git commit -am "adding another 100 lines of codes" newFile1.txt

$ git push
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 318 bytes | 159.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/satyakaibm/demo_repo1.git
   741809f..e455157  master -> master


$ git log --oneline
e455157 (HEAD -> master, origin/master) adding another 100 lines of codes
741809f Commiting my another 200 lines of code now.
7203460 Commiting my 100 lines of code



Note: In the github webpage, now modify the file (newFile1.txt) in Github site and commit the code there.
But you can't see that change in local folder in Linux machine.
To get the latest code in the local repository we need to pull the code intermittently.

$ git pull https://github.com/satyakaibm/demo_repo1
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/satyakaibm/demo_repo1
   57e0cb2..5526de0  master     -> origin/master
Updating 57e0cb2..5526de0
Fast-forward
 newFile1.txt | 3 +++
 1 file changed, 3 insertions(+)


$ git log --oneline
5526de0 (HEAD -> master, origin/master) greetings
57e0cb2 adding last 4th commit
e455157 adding another 100 lines of codes
741809f Commiting my another 200 lines of code now.
7203460 Commiting my 100 lines of code


$ git pull https://github.com/satyakaibm/demo_repo1
Already up to date.


$ mkdir demo_repo3

$ git clone  https://github.com/satyakaibm/MyNotes.git

